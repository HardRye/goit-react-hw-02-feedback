{"version":3,"sources":["components/Feedback/Section/Section.js","components/Feedback/Statistics/Statistics.js","components/Feedback/Notification/Notification.js","components/Feedback/FeedbackOptions/OptionButton.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Feedback.js","components/App.js","index.js"],"names":["Section","title","children","className","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","OptionButton","name","onClickAction","type","onClick","style","marginRight","FeedbackOptions","options","onLeaveFeedback","map","el","key","Feedback","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","updateState","setState","prevState","handleFeedback","e","actionName","target","this","Object","keys","Component","App","ReactDOM","render","document","querySelector"],"mappings":"gPAGMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,6BACE,wBAAIC,UAAU,SAASF,GACtBC,IAKPF,EAAQI,aAAe,CACrBF,SAAU,MAQGF,QCEAK,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,KCCdC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,ICiBEC,EAlBM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cAC5B,OACE,4BACEC,KAAK,SACLF,KAAMA,EACNG,QAASF,EACTG,MAAO,CAAEC,YAAa,KAErBL,ICQQM,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,6BACGD,EAAQE,KAAI,SAAAC,GAAE,OACb,kBAAC,EAAD,CAAcC,IAAKD,EAAIV,KAAMU,EAAIT,cAAeO,SCFnCI,E,4MACnBC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,mBAAqB,WAAO,IAAD,EACM,EAAKD,MACpC,OAFyB,EACjBrB,KADiB,EACXC,QADW,EACFC,K,EAIzBqB,gCAAkC,WAAO,IAC/BvB,EAAS,EAAKqB,MAAdrB,KACR,MAAM,GAAN,OAAUwB,KAAKC,MAAOzB,EAAO,EAAKsB,qBAAwB,KAA1D,M,EAGFI,YAAc,SAAAlB,GACZ,EAAKmB,UAAS,SAAAC,GAAS,sBACpBpB,EAAOoB,EAAUpB,GAAQ,O,EAI9BqB,eAAiB,SAAAC,GACf,IAAMC,EAAaD,EAAEE,OAAOxB,KAC5B,EAAKkB,YAAYK,I,uDAGT,IAAD,EACwBE,KAAKZ,MAA5BrB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBa,EAAUmB,OAAOC,KAAKF,KAAKZ,OAEjC,OACE,kBAAC,EAAD,CAAS1B,MAAM,yBACb,kBAAC,EAAD,CACEoB,QAASA,EACTC,gBAAiBiB,KAAKJ,iBAGxB,wBAAIhC,UAAU,cAAd,cAECoC,KAAKX,qBACJ,kBAAC,EAAD,CACEtB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO8B,KAAKX,qBACZlB,mBAAoB6B,KAAKV,oCAG3B,kBAAC,EAAD,CAAcjB,QAAQ,2B,GAlDM8B,aCEvBC,EALH,kBACV,6BACE,kBAAC,EAAD,Q,MCCJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.9d019c34.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h3 className=\"title\">{title}</h3>\n      {children}\n    </div>\n  );\n};\n\nSection.defaultProps = {\n  children: null,\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.arrayOf(PropTypes.element),\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types'; // shortcut: impt\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react'; // shortcut: rafc\nimport PropTypes from 'prop-types'; // impt\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst OptionButton = ({ name, onClickAction }) => {\n  return (\n    <button\n      type=\"button\"\n      name={name}\n      onClick={onClickAction}\n      style={{ marginRight: 10 }}\n    >\n      {name}\n    </button>\n  );\n};\n\nOptionButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default OptionButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OptionButton from './OptionButton';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div>\n      {options.map(el => (\n        <OptionButton key={el} name={el} onClickAction={onLeaveFeedback} />\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React, { Component } from 'react';\nimport Section from './Section/Section';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\n\nexport default class Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return `${Math.floor((good / this.countTotalFeedback()) * 100)}%`;\n  };\n\n  updateState = name => {\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  handleFeedback = e => {\n    const actionName = e.target.name;\n    this.updateState(actionName);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onLeaveFeedback={this.handleFeedback}\n        />\n\n        <h3 className=\"statistics\">Statistics</h3>\n\n        {this.countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    );\n  }\n}\n","import React from 'react';\nimport Feedback from './Feedback/Feedback';\n\nconst App = () => (\n  <div>\n    <Feedback />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}